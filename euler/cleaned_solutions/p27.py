

# 13 mins, (using primes_lt3 from p10)
# In [1]: %time %run p27.py
# (71, (-61, 971))
# CPU times: user 12.3 s, sys: 149 ms, total: 12.4 s
# Wall time: 12.9 s

from math import sqrt

def primes_lt3(N):
	"""
	Return all primes less than N > 0 int
	"""
	# test every number less than N/2
	primes = [ i for i in xrange(2,N)
				 if not any( ( i % p == 0 for p in xrange(2,int(sqrt(i))+1) ) )]

	return primes

PRIMES = set(primes_lt3(1000000))


def num_consec_primes(a,b):
	"""
	Return number of consecutive primes generated by n^2 + an + b (from n=0,1,...)
	"""
	n = 0
	y = b
	while y in PRIMES:
		n += 1
		y = n ** 2 + (a * n) + b
	return n


def p27():
	bs = primes_lt3(1000)

	largest = (40,(1,41))
	for a in xrange(-999,1000):
		for b in bs:
			n = num_consec_primes(a,b)
			if n > largest[0]:
				largest = (n, (a,b))

	a,b = largest[1]
	print largest

	return a*b
