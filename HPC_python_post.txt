

Series: Making Faster Python Code (when CPU bounded...)

0) Caveats

	CPU bound vs I/O bound

	get it working first!
		do quickest brute force algorithm
		the power of python is ability try things fast!

	Most HPC python is just about giving the things that made it easy to come up with a solution (no type checking, calling C extensions...)

	Improvements are very much PROBLEM DEPENDENT

		sometimes a quick alg change == 1000X speedup (e.g. all_primes funct)
		sometimes can vectorize
		sometimes embarrasingly parallel
		sometimes 3rd party libs ==> no smart compiler use
		can mix and match these methods!
	
	EVEN HARDWARE can get in the way and must be accounted for
	
		quick plot of variety of run times I've seen for BEST execution (without having changed anything)
		LLang competition benchmarks are on SPECIFIC machine architectures...
		computer not plugged in
		multiple cores/not
		size of caches? main memory?
		

	This series will take you through improving CPU bound EULER prob

	table of speed up methods (and whether they can be mixed/matched)

		data-struct/alg analysis
		pypy
		cython
		...


	My goal: 
		starting with simple brute force imp, what are the incremental improvements I can make (and time invested)
			
			improvement	speedup		time invested
			...
			...
			mix 1,3,4	X100

1) profiling (cProfile, line_prof)


2) quick and dirties

	pypy